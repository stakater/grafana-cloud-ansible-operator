- name: Set current date and time
  ansible.builtin.command: date --iso-8601=seconds
  register: current_datetime
  changed_when: false

- name: Ansible date time
  ansible.builtin.set_fact:
    ansible_date_time:
      iso8601: "{{ current_datetime.stdout }}"

- name: Get all Config CRs in the operator namespace
  kubernetes.core.k8s_info:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    namespace: "{{ grafana_cloud_operator_operator_namespace }}"
  register: all_gco_crs

- name: Fail if there's more than one CR
  ansible.builtin.fail:
    msg: "There are multiple Config CRs in the {{ grafana_cloud_operator_operator_namespace }} namespace. Only one is expected"
  when: all_gco_crs.resources | length > 1

- name: Set the CR name from the fetched list
  ansible.builtin.set_fact:
    gco_cr_name: "{{ all_gco_crs.resources[0].metadata.name }}"

- name: Update CR name and namespace
  ansible.builtin.set_fact:
    cr_name: "{{ gco_cr_name }}"
    cr_namespace: "{{ grafana_cloud_operator_operator_namespace }}"
    gco_cr: "{{ all_gco_crs.resources[0] }}"

# # Fetch the single Config CR
# - name: Get the specific Config CR
#   kubernetes.core.k8s_info:
#     api_version: grafanacloud.stakater.com/v1alpha1
#     kind: Config
#     namespace: "{{ cr_namespace }}"
#     name: "{{ cr_name }}"
#   register: gco_cr

- name: Update CR status to CRRetrieved
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
            status: 'True'
            type: "Processing"
            reason: "CRRetrieved"
            message: "Config CR retrieved"

- name: Ensure required CR fields are set
  ansible.builtin.fail:
    msg: "Required field '{{ item.field }}' is missing in the Config CR"
  loop:
    - { field: "grafanaAPIToken.secretName", value: gco_cr.spec.grafanaAPIToken.secretName }
    - { field: "grafanaAPIToken.key", value: gco_cr.spec.grafanaAPIToken.key }
  loop_control:
    label: "{{ item.field }}"
  when: (item.value is none or item.value == '')

- name: Get Grafana API token from the secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: "{{ gco_cr.spec.grafanaAPIToken.secretName }}"
    namespace: "{{ cr_namespace }}"
  register: grafana_api_secret

- name: Decode key
  ansible.builtin.set_fact:
    grafana_cloud_api_token: "{{ grafana_api_secret.resources[0].data[gco_cr.spec.grafanaAPIToken.key] | b64decode }}"

- name: Fetch SlackId
  ansible.builtin.set_fact:
    slack_id: "{{ gco_cr.spec.slackId | default('') }}"

- name: Fetch Slack Condition
  ansible.builtin.set_fact:
    slack_cond: "{{ gco_cr.spec.slack | default('true') }}"

- name: Update CR status to TokenFetched
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
            type: "Processing"
            status: 'True'
            reason: "TokenFetched"
            message: "Grafana API token fetched from the secret"

- name: Ensure Grafana API Token is available
  ansible.builtin.fail:
    msg: "Failed to retrieve Grafana API token from the secret."
  when: grafana_cloud_api_token is not defined or grafana_cloud_api_token == ''

- name: Fetch list of all existing integrations in Grafana OnCall
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}"
    method: GET
    headers:
      Authorization: "{{ grafana_cloud_api_token }}"
      Content-Type: "application/json"
    return_content: true
  register: existing_integrations_response

- name: Extract integration names from the response
  ansible.builtin.set_fact:
    existing_integration_names: "{{ existing_integrations_response.json.results | map(attribute='name') | list }}"

- name: Ensure retrieved Grafana integrations list is valid
  ansible.builtin.fail:
    msg: "Failed to retrieve valid Grafana integrations"
  when: existing_integration_names is none or existing_integration_names | type_debug != 'list'

- name: Update CR status to IntegrationsListFetched
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastUpdated: "{{ ansible_date_time.iso8601 }}"
            status: 'True'
            type: "Processing"
            reason: "IntegrationsListFetched"
            message: "List of existing Grafana integrations fetched"

- name: Fetch alertmanager-main secret for cluster
  kubernetes.core.k8s_info:
    namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    kind: Secret
    name: "{{ grafana_cloud_operator_alertmanager_secret_name }}"
  register: fetched_alertmanager_secret

- name: Update CR status to AlertmanagerSecretFetched
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
            type: "Processing"
            status: 'True'
            reason: "AlertmanagerSecretFetched"
            message: "Fetched alertmanager-main secret for cluster"
  when: (fetched_alertmanager_secret.resources | default([]) | length) > 0

- name: Update CR status to AlertmanagerSecretInvalid
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
            status: 'True'
            type: "Failed"
            reason: "AlertmanagerSecretInvalid"
            message: "Alertmanager secret data is invalid or empty"
  when: (fetched_alertmanager_secret.resources[0].data | default({}) | length) == 0

- name: Ensure alertmanager secret data is valid
  ansible.builtin.fail:
    msg: "Alertmanager secret data is invalid or empty."
  when: (fetched_alertmanager_secret.resources[0].data | default({}) | length) == 0
