- name: Debug at the start of deletion
  ansible.builtin.debug:
    msg: "Started processing deletion tasks for standalone"

- name: Update CR status to DeletionInitiated
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ grafana_cloud_operator_cr_name }}"
    namespace: "{{ grafana_cloud_operator_grafana_cloud_operator_cr_namespace }}"
    status:
      conditions:
        - lastTransitionTime: "{{ grafana_cloud_operator_ansible_date_time.iso8601 }}"
          status: "True"
          type: "DeletionInitiated"
          reason: "OperationStarted"
          message: "Operation to delete Grafana OnCall integration started"

- name: Get all folders in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_gco_cr.spec.sloCloudAPI }}/folders"
    method: GET
    body_format: json
    status_code: [200, 202]
    headers:
      Authorization: Bearer {{ grafana_cloud_operator_slo_api_token }}
      Content-Type: "application/json"
    return_content: true
  register: grafana_cloud_operator_grafana_cloud_folders

- name: Get the Cluster's name
  kubernetes.core.k8s_info:
    kind: IngressController
    api_version: operator.openshift.io/v1
  register: grafana_cloud_operator_ingress_controller_info

- name: Update hostname
  ansible.builtin.set_fact:
    grafana_cloud_operator_cluster_name: "{{ grafana_cloud_operator_ingress_controller_info.resources[0].status.domain | regex_search('(?<=\\.)[^.]+(?=\\.)') }}"

- name: Determine if integration exists for the cluster
  ansible.builtin.set_fact:
    grafana_cloud_operator_integration_exists_for_cluster: "{{ grafana_cloud_operator_cluster_name in grafana_cloud_operator_existing_integration_names }}"

- name: Display the integration exist for cluster
  ansible.builtin.debug:
    msg: "{{ grafana_cloud_operator_integration_exists_for_cluster }}"

- name: List integrations and regsiter it
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}"
    method: GET
    return_content: true
    headers:
      Authorization: "{{ grafana_cloud_operator_grafana_cloud_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
  when: grafana_cloud_operator_integration_exists_for_cluster
  register: grafana_integration_response
  failed_when: false

- name: Find Grafana Integration ID for the Cluster
  ansible.builtin.set_fact:
    integration_id: >-
      {{
        (grafana_integration_response.json.results | selectattr('name', 'eq', grafana_cloud_operator_cluster_name) | list)[0].id
        if (grafana_integration_response.json.results | selectattr('name', 'eq', grafana_cloud_operator_cluster_name) | list)
        else None
      }}

- name: Delete the Integration
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}{{ integration_id }}"
    method: DELETE
    headers:
      Authorization: "{{ grafana_cloud_operator_grafana_cloud_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
  when: grafana_cloud_operator_integration_exists_for_cluster
  register: grafana_integration_response
  failed_when: false

- name: Set the UID of the folder to delete
  ansible.builtin.set_fact:
    grafana_cloud_operator_folder_uid_to_delete: "{{ grafana_cloud_operator_grafana_cloud_folders.json | selectattr('title', 'equalto', grafana_cloud_operator_cluster_name) | map(attribute='uid') | list }}"
  when: grafana_cloud_operator_gco_cr.spec.enabled == 'true'

- name: Delete Dashboard
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_gco_cr.spec.sloCloudAPI }}/folders/{{ item }}"
    method: DELETE
    body_format: json
    return_content: true
    headers:
      Authorization: Bearer {{ grafana_cloud_operator_slo_api_token }}
      Content-Type: "application/json"
    status_code: 200
  loop: "{{ grafana_cloud_operator_folder_uid_to_delete }}"
  loop_control:
    loop_var: item
  when: grafana_cloud_operator_gco_cr.spec.enabled == 'true'

- name: Decode and modify alertmanager secret configuration
  ansible.builtin.set_fact:
    modified_alertmanager_secret_content: "{{ {} | to_nice_yaml | b64encode }}"

- name: Patch alertmanager-main secret for cluster
  kubernetes.core.k8s:
    state: present
    namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ grafana_cloud_operator_alertmanager_secret_name }}"
        namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
      data:
        alertmanager.yaml: "{{ encoded_alertmanager_secret_content }}"
  when: not grafana_cloud_operator_integration_exists_for_cluster

- name: Update CR status to DeletionCompleted
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ grafana_cloud_operator_cr_name }}"
    namespace: "{{ grafana_cloud_operator_grafana_cloud_operator_cr_namespace }}"
    status:
      conditions:
        - lastTransitionTime: "{{ grafana_cloud_operator_ansible_date_time.iso8601 }}"
          status: "True"
          type: "Successful"
          reason: "IntegrationDeleted"
          message: "Deleted integration for cluster {{ grafana_cloud_operator_cluster_name }}"
