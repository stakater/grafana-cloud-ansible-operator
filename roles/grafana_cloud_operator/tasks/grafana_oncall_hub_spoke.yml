- name: Debug at the start of hub spoke
  ansible.builtin.debug:
    msg: "Started processing hub spoke tasks"

- name: Add finalizer to the CR
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
        finalizers:
          - "grafanacloud.stakater.com/config"
  when: "'grafanacloud.stakater.com/config' not in gco_cr.metadata.finalizers"

- name: Update CR status to Initiated
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ cr_name }}"
    namespace: "{{ cr_namespace }}"
    status:
      conditions:
        - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
          status: 'True'
          type: "Initiated"
          reason: "OperationStarted"
          message: "Operation to integrate Grafana OnCall started"

- name: Fetch current status from Config CR
  kubernetes.core.k8s_info:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ cr_name }}"
    namespace: "{{ cr_namespace }}"
  register: current_config_cr

- name: Fetch ManagedCluster from all namespaces
  kubernetes.core.k8s_info:
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
  register: managed_clusters_raw

- name: Extract ManagedCluster names with prefix
  ansible.builtin.set_fact:
    managed_cluster_names: "{{ managed_cluster_names | default([]) + ['name: ' ~ item.metadata.name] }}"
  loop: "{{ managed_clusters_raw.resources }}"
  loop_control:
    loop_var: item

- name: Extract ManagedCluster owners with prefix
  ansible.builtin.set_fact:
    managed_cluster_owners: "{{ managed_cluster_owners | default([]) + ['owner: ' ~ item.metadata.labels.owner | default('unknown')] }}"
  loop: "{{ managed_clusters_raw.resources }}"
  loop_control:
    loop_var: item

- name: Combine managed_cluster_names and managed_cluster_owners into a dictionary
  ansible.builtin.set_fact:
    managed_clusters: >-
      {{
        dict(
          managed_cluster_names
          | map('regex_replace', '^name: ', '')
          | zip(
              managed_cluster_owners
              | map('regex_replace', '^owner: ', '')
            )
        )
      }}

- name: Adds name as prefix to integration_names
  ansible.builtin.set_fact:
    integration_names: "{{ existing_integration_names | map('regex_replace', '^', 'name: ') | list }}"

- name: Filter common clusters for integration by name
  ansible.builtin.set_fact:
    common_clusters: >-
      {{
        managed_clusters
        | dict2items
        | selectattr('key', 'in', integration_names)
        | items2dict
      }}

- name: Determine which ManagedCluster CRs don't have integrations (case-insensitive)
  ansible.builtin.set_fact:
    create_integration_for: >-
      {{
        managed_clusters
        | dict2items
        | map(attribute='key')
        | zip(
            managed_clusters | dict2items | map(attribute='value')
        )
        | map('join', '-')
        | reject('in', integration_names
          | map('regex_replace', '^name: ', '')
          | map('lower')
        | list)
        | list
      }}

- name: Transform create_integration_for into a list of dictionaries
  ansible.builtin.set_fact:
    create_integration_for_dict: "{{ create_integration_for_dict | default([]) + [{'name': item}] }}"
  loop: "{{ create_integration_for }}"
  loop_control:
    loop_var: item

- name: Integration creation
  block:
    - name: Fetch Slack Channel from ManagedCluster namespace
      kubernetes.core.k8s_info:
        api_version: slack.stakater.com/v1alpha1
        kind: Channel
        # Strip everything from the last dash to the end.
        # e.g., "local-cluster-unknown" -> "local-cluster"
        #       "2d23wd4e-epical"       -> "2d23wd4e"
        namespace: "{{ item.name | regex_replace('^(.+)-[^-]+$', '\\1') }}"
      register: slack_channel_info
      loop: "{{ create_integration_for_dict }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Extract Channel id from slack channel
      ansible.builtin.set_fact:
        slack_channel_ids: "{{ slack_channel_ids | default([]) + [{'name': item.metadata.name, 'slack_id': item.status.id}] }}"
      loop: "{{ slack_channel_info.results | map(attribute='resources') | flatten }}"
      loop_control:
        label: "{{ item.metadata.name }}"

    - name: Populate List with spaces if any
      vars:
        slack_id_fetched: "{{ slack_channel_ids | selectattr('name', 'contains', item.name) | map(attribute='slack_id') | join(',') }}"
      ansible.builtin.set_fact:
        slack_channel_validated: "{{ slack_channel_validated | default([]) + [{'name': item.name, 'slack_id': slack_id_fetched}] }}"
      loop: "{{ create_integration_for }}"
      loop_control:
        label: "{{ item.name }}"
      when: slack_channel_ids is defined

    - name: Create a new integration in Grafana OnCall integration for each ManagedClusters that does not have one
      ansible.builtin.uri:
        url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}"
        method: POST
        body_format: json
        return_content: true
        headers:
          Authorization: "{{ grafana_cloud_api_token }}"
          Content-Type: "application/json"
        body: >
          {{
            {
              "type": "alertmanager",
              "name": (item.key | regex_replace('^name: ', '') + '-' + item.value | regex_replace('^owner: ', '')),
              "default_route": {
                "slack": {
                  "channel_id": slack_channel_validated[loop_index].slack_id,
                  "enabled": slack_cond
                }
              }
            } if slack_channel_validated is defined and
                 slack_channel_validated | length > loop_index and
                 slack_channel_validated[loop_index].slack_id | length > 0
              else {
                "type": "alertmanager",
                "name": (item.key | regex_replace('^name: ', '') + '-' + item.value | regex_replace('^owner: ', ''))
              }
          }}
        status_code: [200, 201]
      register: grafana_integration_response
      loop: "{{ common_clusters | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
        index_var: loop_index
      retries: 5
      delay: 6
      until: grafana_integration_response.status in [200, 201]
      failed_when: false

    - name: Update status with ManagedCluster field
      operator_sdk.util.k8s_status:
        api_version: grafanacloud.stakater.com/v1alpha1
        kind: Config
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
        status:
          managedClusters: []
      when:
        - "'managedClusters' not in current_config_cr.resources[0].status"
        - create_integration_for | length == grafana_integration_response.results | length

    - name: Extract existing ManagedCluster names from current status
      ansible.builtin.set_fact:
        existing_managed_cluster_names: "{{ current_config_cr.resources[0].status.managedClusters | list | default([]) }}"
      when: create_integration_for | length == grafana_integration_response.results | length

    - name: Set fact for list of ManagedCluster names
      ansible.builtin.set_fact:
        managed_cluster_names: "{{ managed_clusters | map(attribute='name') | list }}"
      when: create_integration_for | length == grafana_integration_response.results | length

    - name: Merge existing ManagedCluster names with new ones
      ansible.builtin.set_fact:
        updated_managed_cluster_names: >-
          {{
            (existing_managed_cluster_names + managed_cluster_names) | unique
          }}
      when: create_integration_for | length == grafana_integration_response.results | length

    - name: Update CR status to IntegrationsCreated
      operator_sdk.util.k8s_status:
        api_version: grafanacloud.stakater.com/v1alpha1
        kind: Config
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
        status:
          managedClusters: "{{ updated_managed_cluster_names }}"
          conditions:
            - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
              status: "True"
              type: "Successful"
              reason: "IntegrationsCreated"
              message: "Grafana integrations created for all ManagedClusters."
      when: create_integration_for | length == grafana_integration_response.results | length

    - name: Inform user if Grafana integration creation was skipped or failed
      when: grafana_integration_response is skipped or (grafana_integration_response.results | rejectattr('status', 'in', [200, 201]) | list | length > 0)
      block:
        - name: Display message about potential Grafana integration issues
          ansible.builtin.debug:
            msg: "Checking if Grafana integration for the cluster was skipped or failed."

        - name: Update CR status to Failure for failed integrations
          operator_sdk.util.k8s_status:
            api_version: grafanacloud.stakater.com/v1alpha1
            kind: Config
            name: "{{ cr_name }}"
            namespace: "{{ cr_namespace }}"
            status:
              conditions:
                - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
                  status: 'True'
                  type: "Failed"
                  reason: "IntegrationCreationFailed"
                  message: "Failed to create Grafana integration for ManagedClusters."
          loop: "{{ grafana_integration_response.results }}"
          when: item.status not in [200, 201]

        - name: Start deletion for hubAndSpoke mode
          ansible.builtin.include_tasks: delete_grafana_oncall_hub_spoke.yml

    - name: Associate Grafana integration details with ManagedClusters
      ansible.builtin.set_fact:
        mapped_integrations: "{{ mapped_integrations | default([]) + [{'cluster': item.item, 'grafana_details': item.json}] }}"
      loop: "{{ grafana_integration_response.results }}"

    # Following tasks will execute only if Grafana integration was created successfully
    - name: Modify Alertmanager secret
      ansible.builtin.include_tasks: modify_alertmanager_secret.yml
      vars:
        receiver_name: "{{ item.grafana_details.name }}"
        receiver_url: "{{ item.grafana_details.link }}"
        namespace: "{{ item.cluster.name }}"
        cluster_name: "{{ item.cluster.name }}"
        provision_mode: "hubAndSpoke"
      loop: "{{ mapped_integrations }}"

- name: Update CR status for ManifestWork creation
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ cr_name }}"
    namespace: "{{ cr_namespace }}"
    status:
      conditions:
        - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
          status: 'True'
          type: "Successful"
          reason: "ManifestWorksCreated"
          message: "ManifestWorks created for all ManagedClusters"
  when: not manifestwork_creation_results.failed

- name: Update CR status for ManifestWork creation failure
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        conditions:
          - lastTransitionTime: "{{ ansible_date_time.iso8601 }}"
            type: "Failed"
            reason: "ManifestWorkCreationFailed"
            message: "Failed to create ManifestWork for one or more ManagedClusters"
  when: manifestwork_creation_results.failed
