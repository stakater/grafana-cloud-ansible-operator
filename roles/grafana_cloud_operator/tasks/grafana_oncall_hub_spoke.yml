- name: Debug at the start of hub spoke
  ansible.builtin.debug:
    msg: "Started processing hub spoke tasks"

- name: Update CR status to Initiated
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        lastUpdated: "{{ ansible_date_time.iso8601 }}"
        phase: "Initiated"
        reason: "OperationStarted"
        message: "Operation to integrate Grafana OnCall started"

- name: Fetch ClusterDeployments from all namespaces
  kubernetes.core.k8s_info:
    api_version: hive.openshift.io/v1
    kind: ClusterDeployment
  register: cluster_deployments_raw

- name: Extract list of ClusterDeployments with their namespaces
  ansible.builtin.set_fact:
    cluster_deployments: "{{ cluster_deployments | default([]) + [{'name': item.metadata.name, 'namespace': item.metadata.namespace}] }}"
  loop: "{{ cluster_deployments_raw.resources }}"
  loop_control:
    loop_var: item

- name: Determine which ClusterDeployments don't have integrations
  ansible.builtin.set_fact:
    create_integration_for: "{{ cluster_deployments | rejectattr('name', 'in', existing_integration_names) | list }}"

- name: Integration creation
  block:
    - name: Fetch Slack Channel from clusterdeployment namespace
      kubernetes.core.k8s_info:
        api_version: slack.stakater.com/v1alpha1
        kind: Channel
        namespace: "{{ item.namespace }}"
      register: slack_channel_info
      loop: "{{ create_integration_for }}"
      loop_control:
        label: "{{ item.namespace }}"

    - name: Extract Channel id from slack channel
      ansible.builtin.set_fact:
        slack_channel_ids: "{{ slack_channel_ids | default([]) + [{'name': item.metadata.name, 'slack_id': item.status.id}] }}"
      loop: "{{ slack_channel_info.results | map(attribute='resources') | flatten }}"
      loop_control:
        label: "{{ item.metadata.name }}"

    - name: Populate List with spaces if any
      vars:
        slack_id_fetched: "{{ slack_channel_ids | selectattr('name', 'contains', item.name) | map(attribute='slack_id') | join(',') }}"
      ansible.builtin.set_fact:
        slack_channel_validated: "{{ slack_channel_validated | default([]) + [{'name': item.name, 'slack_id': slack_id_fetched }] }}"
      loop: "{{ create_integration_for }}"
      loop_control:
        label: "{{ item.name }}"
      when: slack_channel_ids is defined

    - name: Create a new integration in Grafana OnCall integration for each ClusterDeployment that does not have one
      ansible.builtin.uri:
        url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}"
        method: POST
        body_format: json
        return_content: true
        headers:
          Authorization: "{{ grafana_cloud_api_token }}"
          Content-Type: "application/json"
        body: >
          {{
            {
              "type": "alertmanager",
              "name": item.name,
              "default_route": {
                "slack": {
                  "channel_id": slack_channel_validated[loop_index].slack_id,
                  "enabled": true
                }
              }
            } if slack_channel_validated[loop_index].slack_id | length > 0 else {
              "type": "alertmanager",
              "name": item.name
            }
          }}
        status_code: [200, 201]
      register: grafana_integration_response
      loop: "{{ create_integration_for }}"
      loop_control:
        label: "{{ item.name }}"
        index_var: loop_index
      retries: 5
      delay: 6
      until: grafana_integration_response.status in [200, 201]
      when: slack_channel_validated is defined
      failed_when: false

    - name: Update CR status to IntegrationsCreated
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: grafanacloud.stakater.com/v1alpha1
          kind: Config
          metadata:
            name: "{{ cr_name }}"
            namespace: "{{ cr_namespace }}"
          status:
            lastUpdated: "{{ ansible_date_time.iso8601 }}"
            phase: "Successful"
            reason: "IntegrationsCreated"
            message: "Grafana integrations created for all ClusterDeployments."
      when: create_integration_for | length == grafana_integration_response.results | length

    - name: Inform user if Grafana integration creation was skipped or failed
      when: grafana_integration_response is skipped or (grafana_integration_response.results | rejectattr('status', 'in', [200, 201]) | list | length > 0)
      block:
        - name: Display message about potential Grafana integration issues
          ansible.builtin.debug:
            msg: "Checking if Grafana integration for the cluster was skipped or failed."

        - name: Update CR status to Failure for failed integrations
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: grafanacloud.stakater.com/v1alpha1
              kind: Config
              metadata:
                name: "{{ cr_name }}"
                namespace: "{{ cr_namespace }}"
              status:
                lastUpdated: "{{ ansible_date_time.iso8601 }}"
                phase: "Failed"
                reason: "IntegrationCreationFailed"
                message: "Failed to create Grafana integration for {{ item.name }} ClusterDeployment."
          loop: "{{ grafana_integration_response.results }}"
          when: item.status not in [200, 201]

        - name: End play if any integrations failed or were skipped
          ansible.builtin.meta: end_play

    - name: Associate Grafana integration details with ClusterDeployments
      ansible.builtin.set_fact:
        mapped_integrations: "{{ mapped_integrations | default([]) + [{'cluster': item.item, 'grafana_details': item.json}] }}"
      loop: "{{ grafana_integration_response.results }}"

    # Following tasks will execute only if Grafana integration was created successfully
    - name: Modify Alertmanager secret
      ansible.builtin.include_tasks: modify_alertmanager_secret.yml
      vars:
        receiver_name: "{{ item.grafana_details.name }}"
        receiver_url: "{{ item.grafana_details.link }}"
        namespace: "{{ item.cluster.namespace }}"
        cluster_name: "{{ item.cluster.name }}"
        provision_mode: "hubAndSpoke"
      loop: "{{ mapped_integrations }}"

- name: Debug syncset_creation_result
  ansible.builtin.debug:
    msg: "syncset_creation_results : {{syncset_creation_results}}" 

- name: Update CR status for SyncSet creation
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        lastUpdated: "{{ ansible_date_time.iso8601 }}"
        phase: "Successful"
        reason: "SyncSetsCreated"
        message: "SyncSets created for all ClusterDeployments"
  when: syncset_creation_results.results | rejectattr('failed', 'equalto', true) | list | length == mapped_integrations | length

- name: Update CR status for SyncSet creation failure
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        lastUpdated: "{{ ansible_date_time.iso8601 }}"
        phase: "Failed"
        reason: "SyncSetCreationFailed"
        message: "Failed to create SyncSet for one or more ClusterDeployments"
  when: syncset_creation_results.results | rejectattr('failed', 'equalto', false) | list | length > 0
