- name: Fetch ManagedCluster from all namespaces
  kubernetes.core.k8s_info:
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
  register: managed_clusters_raw

- name: Update CR status to DeletionInitiated
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: grafanacloud.stakater.com/v1alpha1
      kind: Config
      metadata:
        name: "{{ cr_name }}"
        namespace: "{{ cr_namespace }}"
      status:
        lastUpdated: "{{ ansible_date_time.iso8601 }}"
        phase: "DeletionInitiated"
        reason: "OperationStarted"
        message: "Operation to delete Grafana OnCall integration started"

- name: Extract list of ManagedCluster with their namespaces
  ansible.builtin.set_fact:
    managed_clusters: "{{ managed_clusters | default([]) + [{'name': item.metadata.name}] }}"
  loop: "{{ managed_clusters_raw.resources }}"
  loop_control:
    loop_var: item

- name: Determine which ManagedCluster don't have integrations
  ansible.builtin.set_fact:
    create_integration_for: "{{ managed_clusters }}"

- name: Create a new integration in Grafana OnCall for the cluster only if it does not have one with slackId
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_grafana_cloud_integrations_api_url }}"
    method: GET
    return_content: true
    headers:
      Authorization: "{{ grafana_cloud_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
  register: grafana_integration_response
  failed_when: false

- name: Parse the response and extract integration details
  ansible.builtin.set_fact:
    grafana_integrations: "{{ grafana_integration_response.json.results }}"

- name: Display the Grafana integrations
  ansible.builtin.debug:
    msg: "{{ grafana_integrations }}"

- name: Find Grafana Integration ID for the Cluster
  ansible.builtin.set_fact:
    integration_id: >-
      {{
        (grafana_integrations | selectattr('name', 'eq', item.name) | list)[0].id
        if (grafana_integrations | selectattr('name', 'eq', item.name) | list)
        else None
      }}
  loop: "{{ create_integration_for }}"
  loop_control:
    label: "{{ item.name }}"

- name: Display the Integration ID
  ansible.builtin.debug:
    msg: "The integration ID for cluster {{ item.name }} is {{ integration_id }}"
  loop: "{{ create_integration_for }}"
  loop_control:
    label: "{{ item.name }}"
