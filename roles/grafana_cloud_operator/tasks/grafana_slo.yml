- name: Get all folders in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ slo_grafana_cloud_api }}/folders"
    method: GET
    body_format: json
    headers:
      Authorization: "Bearer {{ slo_grafana_token }}"
    status_code: 200
  register: grafana_cloud_folders
  ignore_errors: true

- name: Set the fact if the folder exists
  ansible.builtin.set_fact:
    folder_uid: "{{ item.uid }}"
  when: item.title == grafana_cloud_operator_slo_customer_name
  with_items:
    - "{{ grafana_cloud_folders.json }}"

- name: Create Folder in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/folders"
    method: POST
    body:
      title: "{{ grafana_cloud_operator_slo_customer_name }}"
    body_format: json
    headers:
      Authorization: "{{ slo_dashboard_api_token }}"
    status_code: 200
  register: grafana_cloud_folder
  when: folder_uid is not defined

- name: Get Secret from openshift-ingress
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: openshift-ingress
    name: router-stats-default
    wait: true
  register: secrets

- name: Create Secret for Remote Write
  kubernetes.core.k8s:
    namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    name: credentials
    definition:
      apiVersion: v1
      kind: Secret
      data:
        remote_password: "{{ grafana_cloud_operator_slo_remote_write_password | b64encode }}"
        remote_username: "{{ grafana_cloud_operator_slo_remote_write_username | b64encode }}"
        statsPassword: "{{ secrets.resources[0].data.statsPassword }}"
        statsUsername: "{{ secrets.resources[0].data.statsUsername }}"
        grafana_cloud_operator_slo_remote_write_url: "{{ grafana_cloud_operator_slo_remote_write_url | b64encode }}"
    apply: true

- name: Deploy Dashboard Chart
  kubernetes.core.helm:
    name: "{{ grafana_cloud_operator_slo_release_name }}-dashboard"
    chart_ref: oci://ghcr.io/stakater/charts/slo-observability
    chart_version: 0.0.9
    update_repo_cache: true
    release_namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    values: "{{ lookup('template', 'slo-observability-values.yaml') | from_yaml }}"

- name: Get Dashboard JSON
  kubernetes.core.k8s_info:
    api_version: v1
    kind: ConfigMap
    namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    name: slo-observability-dashboard
    wait: true
  register: dashboard

- name: Update Dashboard to Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/dashboards/db"
    method: POST
    body: "{{ dashboard.resources[0].data['slo.json'] | from_json }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ slo_dashboard_api_token }}"
    status_code: 200
  register: dashboard_uid

- name: Create configmap for storing data
  kubernetes.core.k8s:
    namespace: "{{ grafana_cloud_operator_alertmanager_namespace }}"
    name: slo-cm
    definition:
      apiVersion: v1
      kind: ConfigMap
      data:
        dashboard_uid: "{{ dashboard_uid.json.uid }}"
        folder_uid: "{{ grafana_cloud_folder.json.uid | default(folder_uid) }}"
        customer_name: "{{ grafana_cloud_operator_slo_customer_name }}"
        grafana_cloud_operator_slo_customer_name: "{{ grafana_cloud_operator_slo_customer_name }}"
    apply: true
