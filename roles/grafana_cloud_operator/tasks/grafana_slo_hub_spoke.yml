- name: Debug message at the start of slo dashboard for hubAndSpoke mode
  ansible.builtin.debug:
    msg: "Strating creation of dashboard in hubAndSpoke mode"

- name: Get all folders in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/folders"
    method: GET
    body_format: json
    status_code: [200, 202]
    headers:
      Authorization: Bearer {{ slo_dashboard_api_token }}
      Content-Type: "application/json"
    return_content: true
  register: grafana_cloud_folders

- name: Debug grafana_cloud_folders
  ansible.builtin.debug:
    msg: "{{ grafana_cloud_folders }}"

- name: Define existing folders for managed clusters
  ansible.builtin.set_fact:
    existing_folders: "{{ grafana_cloud_folders.json | selectattr('title', 'in', current_managed_clusters) | map(attribute='title') | list }}"

- name: Define missing clusters
  ansible.builtin.set_fact:
    missing_clusters: "{{ current_managed_clusters | difference(existing_folders) }}"


- name: Set the fact if the folder exists
  ansible.builtin.set_fact:
    folder_uid: "{{ item.uid }}"
  when: item.title == missing_clusters
  with_items:
    - "{{ grafana_cloud_folders.json }}"

- name: Create Folder in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/folders"
    method: POST
    return_content: true
    body:
      title: "{{ item }}"
    body_format: json
    headers:
      Authorization: "Bearer {{ slo_dashboard_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201]
  register: grafana_cloud_folder
  when: folder_uid is not defined
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Store the folder UID for each managed cluster
  ansible.builtin.set_fact:
    folder_uids: "{{ folder_uids | default({}) | combine({item: (grafana_cloud_folder.results | selectattr('item', 'equalto', item) | map(attribute='json') | first | default({})).uid }) }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Download SLO Dashboard YAML
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/stakater/charts/slo-observability-{{ gco_cr.spec.sloObservabilityVersion }}/slo-observability/templates/grafana/dashboards/slo-dashboard-cm.yaml"
    dest: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    mode: '0644'
    force: yes
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Replace Helm Template for Cluster
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    regexp: "{{ '{{ .Values.cluster }}' }}"
    replace: "{{ item }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Replace Helm Template for Cluster title
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    regexp: "{{ '{{ .Values.cluster | title }}' }}"
    replace: "{{ item }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Replace Helm Template for Folder UID
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    regexp: "{{ '{{ .Values.folderUid }}' }}"
    replace: "{{ folder_uids[item] }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Replace Helm Template for Namespace
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    regexp: '\{\{ include "slo-observability.namespace" \. \}\}'
    replace: "{{ grafana_cloud_operator_slo_dashboard_namespace }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Load Dashboard YAML into a variable
  ansible.builtin.include_vars:
    file: "/tmp/slo-dashboard-{{ item }}-cm.yaml"
    name: "dashboard_data_{{ item }}"
  loop: "{{ missing_clusters }}"
  loop_control:
    loop_var: item

- name: Extract SLO Dashboard JSON
  ansible.builtin.set_fact:
    slo_dashboard_json: "{{ dashboard_data.data['slo.json'] | from_json }}"

- name: Deploy SLO Dashboard to Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/dashboards/db"
    method: POST
    body: "{{ slo_dashboard_json }}"
    return_content: true
    body_format: json
    headers:
      Authorization: "Bearer {{ slo_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201, 400]
  register: dashboard_uid

- name: Skip dashboard creation if it already exists
  ansible.builtin.debug:
    msg: "Dashboard already exists, skipping creation."
  when: dashboard_uid.status == 400
