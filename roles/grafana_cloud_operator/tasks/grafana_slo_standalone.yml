- name: Update CR status to start of SLO dashboard for standalone mode
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ cr_name }}"
    namespace: "{{ cr_namespace }}"
    status:
      lastUpdated: "{{ ansible_date_time.iso8601 }}"
      phase: "Initiated"
      reason: "OperationStarted"
      message: "Starting creation of SLO dashboard in standalone mode"

- name: Get all folders in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/folders"
    method: GET
    body_format: json
    status_code: [200, 202]
    headers:
      Authorization: Bearer {{ slo_api_token }}
      Content-Type: "application/json"
    return_content: true
  register: grafana_cloud_folders

- name: Get the Cluster's name
  kubernetes.core.k8s_info:
    kind: IngressController
    api_version: operator.openshift.io/v1
  register: ingress_controller_info

- name: Update hostname
  ansible.builtin.set_fact:
    cluster_name: "{{ ingress_controller_info.resources[0].status.domain | regex_search('(?<=\\.)[^.]+(?=\\.)') }}"

- name: Set the fact if the folder exists
  ansible.builtin.set_fact:
    folder_uid: "{{ item.uid }}"
  when: item.title == cluster_name
  with_items:
    - "{{ grafana_cloud_folders.json }}"

- name: Create Folder in Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/folders"
    method: POST
    return_content: true
    body:
      title: "{{ cluster_name }}"
    body_format: json
    headers:
      Authorization: Bearer {{ slo_api_token }}
      Content-Type: "application/json"
    status_code: [200, 201]
  register: grafana_cloud_folder
  when: folder_uid is not defined

- name: Store the folder UID
  ansible.builtin.set_fact:
    folder_uid: "{{ grafana_cloud_folder.json.uid | default('default-folder-uid') }}"

- name: Download SLO Dashboard YAML
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/stakater/charts/slo-observability-{{ gco_cr.spec.sloObservabilityVersion }}/slo-observability/templates/grafana/dashboards/slo-dashboard-cm.yaml" # yamllint disable-line rule:line-length
    dest: "/tmp/slo-dashboard-cm.yaml"
    mode: '0644'

- name: Replace Helm Template for Cluster
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-cm.yaml"
    regexp: "{{ '{{ .Values.cluster }}' }}"
    replace: "{{ cluster_name }}"

- name: Replace Helm Template for Cluster title
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-cm.yaml"
    regexp: "{{ '{{ .Values.cluster | title }}' }}"
    replace: "{{ cluster_name | title }}"

- name: Replace Helm Template for Folder UID
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-cm.yaml"
    regexp: "{{ '{{ .Values.folderUid }}' }}"
    replace: "{{ folder_uid }}"

- name: Replace Helm Template for Namespace
  ansible.builtin.replace:
    path: "/tmp/slo-dashboard-cm.yaml"
    regexp: '\{\{ include "slo-observability.namespace" \. \}\}'
    replace: "{{ grafana_cloud_operator_slo_dashboard_namespace }}"

- name: Load Dashboard YAML into a variable
  ansible.builtin.include_vars:
    file: "/tmp/slo-dashboard-cm.yaml"
    name: dashboard_data

- name: Extract SLO Dashboard JSON
  ansible.builtin.set_fact:
    slo_dashboard_json: "{{ dashboard_data.data['slo.json'] | from_json }}"

- name: Deploy SLO Dashboard to Grafana Cloud
  ansible.builtin.uri:
    url: "{{ grafana_cloud_operator_slo_cloud_api }}/dashboards/db"
    method: POST
    body: "{{ slo_dashboard_json }}"
    return_content: true
    body_format: json
    headers:
      Authorization: "Bearer {{ slo_api_token }}"
      Content-Type: "application/json"
    status_code: [200, 201, 400]
  register: dashboard_uid

- name: Skip dashboard creation if it already exists
  ansible.builtin.debug:
    msg: "Dashboard already exists, skipping creation."
  when: dashboard_uid.status == 400

- name: Update CR status to successful creation of SLO Dashboard
  operator_sdk.util.k8s_status:
    api_version: grafanacloud.stakater.com/v1alpha1
    kind: Config
    name: "{{ gco_cr.metadata.name }}"
    namespace: "{{ gco_cr.metadata.namespace }}"
    status:
      lastUpdated: "{{ ansible_date_time.iso8601 }}"
      phase: "Successful"
      reason: "ConfigUpdated"
      message: "SLO Dashboard have been created"
  when: dashboard_uid.status == 200
